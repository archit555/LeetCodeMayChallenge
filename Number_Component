"""
Problem Statement:
Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
 

Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

Note:

1) The given integer is guaranteed to fit within the range of a 32-bit signed integer.
2) You could assume no leading zero bit in the integerâ€™s binary representation.
3) This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/

"""

Solution 1:

class Solution:
    def findComplement(self, num: int) -> int:
            a = num
            b = format(a,'b')
            l = len(b)
            fin = ''
            for i in range(l):
                if b[i] == '1':
                    i = '0'
                else:
                    i = '1'
                fin +=i
            print(fin)
            fin = int(fin,2)
            return(fin)
            
            
 Solution 2:
 class Solution:
    def findComplement(self, num: int) -> int:
            base = 1
            while num >= base:
                base <<= 1
            return num^(base-1)

